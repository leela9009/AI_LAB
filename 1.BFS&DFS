#BFS
graph = {'A':['B', 'C', 'D'], 'B':['E', 'F'], 'C':['F', 'G'], 'E':['H', 'I'], 'F':['J']}
print(graph)

def append(l1,l2):
    for i in l2:
        if i not in l1:
            l1.append(i)
    return l1

def BFS(g, root, goal):
    open = [root]
    closed = []
    while(goal not in closed):
        x = open.pop(0)
        if x in g.keys():
            open = Append(open, g[x])
        closed.append(x)
        print(open, closed)
        
BFS(graph, 'A', 'G')


#DFS
graph={'A':['B', 'C', 'D'], 'B':['E', 'F'], 'C':['F', 'G'], 'E':['H', 'I'], 'F':['J']}
print(graph,"\n")

def Add(l1, l2):
    for i in range(len(l2)):
        l1.insert(0,l2[len(l2)-i-1])
    return l1

def DFS(g,root,goal):
    open=[root]
    closed=[]
    while (goal not in closed):
        x=open.pop(0)
        if x in g.keys():
            open=Add(open,g[x])
        elif x not in g.keys():
            closed.insert(0,x)
        print(open,closed)

DFS(graph,'A','G')
