#BFS
#graph = {'A':['B', 'C', 'D'], 'B':['E', 'F'], 'C':['F', 'G'], 'E':['H', 'I'], 'F':['J']}
#print(graph)

graph={}
n=int(input("enter no of nodes: "))
for i in range(n):
    root=input("enter node: ")
    l=list(map(str,input("enter adjacency nodes: ").split()))
    graph[root]=l
root=input("enter root node: ")
goal=input("enter goal state: ")
print(graph,"\n")

def BFS(g,root,goal):
    open=[]
    open.append(root)
    closed=[]
    print(open,closed)
    while(goal not in closed):
        x=open.pop(0)
        if x in closed:
            continue
        if x in g.keys():
            open.extend(g[x])
        closed.append(x)
        print(open,closed)

BFS(graph,root,goal)


#DFS
def DFS(g,root,goal):
    open=[]
    open.append(root)
    closed=[]
    print(open,closed)
    while (goal not in closed):
        x=open.pop(0)
        if x in closed:
            continue
        closed.append(x)
        x1=[]
        if x in g.keys():
            x1.extend(g[x])
            x1.extend(open)
            open=x1
        print(open,closed)

DFS(graph,root,goal)
